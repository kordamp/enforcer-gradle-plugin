/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2020-2024 The author and/or original authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins{
    id 'org.kordamp.gradle.integration-test'
    id 'org.jetbrains.kotlin.jvm' version '1.4.10'
}

dependencies {
    api project(':enforcer-api')
    api project(':enforcer-rules')
    compileOnly "org.kordamp.gradle:base-gradle-plugin:$kordampPluginVersion"

    testImplementation(localGroovy())
    testImplementation('org.spockframework:spock-core:2.3-groovy-3.0')
    testImplementation('junit:junit:4.13.2')
    testImplementation project(':enforcer-rules')
    testImplementation "org.kordamp.gradle:base-gradle-plugin:$kordampPluginVersion"
}

processResources {
    inputs.property('version', project.version)
    filesMatching(['**/*.properties']) {
        expand(
            'version': project.version,
            'id': 'enforcer',
            'name': 'Kordamp Enforcer Gradle plugin'
        )
    }
}

config {
    plugins {
        enabled = true
        plugin {
            name                = 'enforcer'
            id                  = project.buildPluginId
            implementationClass = project.buildPluginImplementationClass
            displayName         = project.pluginDisplayName
        }
        plugin {
            name                = 'projectEnforcer'
            id                  = project.projectPluginId
            implementationClass = project.projectPluginImplementationClass
            displayName         = project.pluginDisplayName
        }
    }
}

task integrationTestJar(type: Jar) {
    archiveBaseName = project.name + '-tests'
    from sourceSets.integrationTest.output
}

integrationTest {
    dependsOn(project(':enforcer-api').jar, project(':enforcer-rules').jar, jar, integrationTestJar)
    systemProperty 'project.version', project.version
    systemProperty 'commonsLang3Version', project.commonsLang3Version
    systemProperty 'commonsCodecVersion', project.commonsCodecVersion
    systemProperty 'mavenVersion', project.mavenVersion
    systemProperty 'osMavenPluginVersion', project.osMavenPluginVersion
    systemProperty 'jars.dir', [
        project(':enforcer-api').jar,
        project(':enforcer-rules').jar,
        jar
    ].collect { "'${it.destinationDirectory.get().asFile.absolutePath.replace('\\', '/')}'" }
        .join(',')
}

afterEvaluate {
    def publishPluginJar = project.tasks.findByName('publishPluginJar')
    def publishTask = project.tasks.findByName('publishMainPublicationToMavenLocal')
    if (publishTask && publishPluginJar) publishTask.dependsOn(publishPluginJar)
    publishTask = tasks.findByName('publishMainPublicationToLocalSnapshotRepository')
    if (publishTask && publishPluginJar) publishTask.dependsOn(publishPluginJar)
    publishTask = tasks.findByName('publishMainPublicationToLocalReleaseRepository')
    if (publishTask && publishPluginJar) publishTask.dependsOn(publishPluginJar)

    def publishPluginJavaDocsJar = project.tasks.findByName('publishPluginJavaDocsJar')
    publishTask = project.tasks.findByName('publishMainPublicationToMavenLocal')
    if (publishTask && publishPluginJavaDocsJar) publishTask.dependsOn(publishPluginJavaDocsJar)
    publishTask = tasks.findByName('publishMainPublicationToLocalSnapshotRepository')
    if (publishTask && publishPluginJavaDocsJar) publishTask.dependsOn(publishPluginJavaDocsJar)
    publishTask = tasks.findByName('publishMainPublicationToLocalReleaseRepository')
    if (publishTask && publishPluginJavaDocsJar) publishTask.dependsOn(publishPluginJavaDocsJar)

    def publishPluginGroovyDocsJar = project.tasks.findByName('publishPluginGroovyDocsJar')
    publishTask = project.tasks.findByName('publishMainPublicationToMavenLocal')
    if (publishTask && publishPluginGroovyDocsJar) publishTask.dependsOn(publishPluginGroovyDocsJar)
    publishTask = tasks.findByName('publishMainPublicationToLocalSnapshotRepository')
    if (publishTask && publishPluginGroovyDocsJar) publishTask.dependsOn(publishPluginGroovyDocsJar)
    publishTask = tasks.findByName('publishMainPublicationToLocalReleaseRepository')
    if (publishTask && publishPluginGroovyDocsJar) publishTask.dependsOn(publishPluginGroovyDocsJar)
}